type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/Status.java
  visible: true
  text: |
    package server;

    public enum Status {
        ERROR,
        OK
    }
  learner_created: true
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public class Database {
        private List<String> cells;

        public Database() {
            cells = new ArrayList<>(Collections.nCopies(100, ""));

        }

        public String set(int index, String value) {
            if (!isValid(index)) Status.ERROR.name();

            cells.add(index - 1, value);
            return Status.OK.name();

        }

        public String get(int index) {
            if (!isValid(index))
                return Status.ERROR.name();
            if (cells.get(index - 1).isEmpty())
                return Status.ERROR.name();

            return cells.get(index - 1);

        }

        public String delete(int index) {
            if (!isValid(index))
                return Status.ERROR.name();
                cells.set(index - 1, "");
                return Status.OK.name();
        }


        private boolean isValid(int index) {
            return index > 0 && index < 101;
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.util.Scanner;


    public class Client {
        private final String address = "127.0.0.1";
        private final int port = 23456;
        private final Scanner scanner = new Scanner(System.in);

        public void start() {

            try (Socket socket = new Socket(InetAddress.getByName(address), port);
                 DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                 DataInputStream input = new DataInputStream(socket.getInputStream())

            ) {
                System.out.println("Client started!");
                String request = "Give me a record # 12";
                output.writeUTF(request);
                System.out.println("Sent: "+ request);
                String response = input.readUTF();
                System.out.println("Received: " + response);

            } catch (IOException e) {
                e.printStackTrace();
            }


        }
    }
  learner_created: true
- name: src/server/DatabaseManager.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class DatabaseManager {
        private Database database = new Database();
        private final Scanner scanner = new Scanner(System.in);

        public String process(String input){
            Pattern pattern = Pattern.compile("(.+)\\s+(\\d+)");
            Matcher matcher = pattern.matcher(input);
            if(matcher.find()) {
                return String.format("A record # %s was sent!", matcher.group(2));
            }
            return "Wrong request format";
        }

        public void init() {
            Pattern pattern = Pattern.compile("(get|set|delete|exit){1}\\s*(\\d+)*\\s*(.+)*");

            while (true) {
                String input = scanner.nextLine();
                Matcher matcher = pattern.matcher(input);
                String operation = "";
                int index = -1;
                String content = "";
                if(matcher.find()){
                    operation = matcher.group(1);
                    if (operation.equals("exit")) break;

                    index = Integer.parseInt(matcher.group(2));
                    content = matcher.group(3);
                }

                switch (operation) {
                    case "get":
                        System.out.println(database.get(index));
                        break;
                    case "delete":
                        System.out.println(database.delete(index));
                        break;
                    case "set":
                        System.out.println(database.set(index, content));
                        break;
                }
            }
        }
    }
  learner_created: true
- name: src/server/Response.java
  visible: true
  text: |
    package server;

    public class Response {
        private String content;
        private Status status;

        public String getContent() {
            return content;
        }

        public Response setContent(String content) {
            this.content = content;
            return this;
        }

        public Status getStatus() {
            return status;
        }

        public Response setStatus(Status status) {
            this.status = status;
            return this;
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;

    public class Server {
        private final String address = "127.0.0.1";
        private final int port = 23456;
        private DatabaseManager manager = new DatabaseManager();

        public void start() {

            try {
                ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address));
                System.out.println("Server started!");

                Socket socket = server.accept();
                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output = new DataOutputStream(socket.getOutputStream());

                String request = input.readUTF();
                System.out.println("Received: " + request);
                String response = manager.process(request);
                output.writeUTF(response);
                System.out.println("Sent: " + response);

                server.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
  learner_created: true
- name: src/server/Type.java
  visible: true
  text: |
    package server;

    public enum Operation {
        SET,
        GET,
        DELETE,
        EXIT
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Apr 2022 06:56:24 UTC
record: 3
